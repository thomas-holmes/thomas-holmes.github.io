<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thomas' Dev Mind]]></title>
  <link href="http://thomas.holmes.io/atom.xml" rel="self"/>
  <link href="http://thomas.holmes.io/"/>
  <updated>2013-07-09T23:03:46-04:00</updated>
  <id>http://thomas.holmes.io/</id>
  <author>
    <name><![CDATA[Thomas Holmes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coderetreat]]></title>
    <link href="http://thomas.holmes.io/posts/coderetreat/"/>
    <updated>2013-07-09T22:21:00-04:00</updated>
    <id>http://thomas.holmes.io/posts/coderetreat</id>
    <content type="html"><![CDATA[<p>A few weekends ago I attended <a href="http://coderetreat.org/">Coderetreat</a> in Atlanta. It was a great time. I had never heard of it before <a href="http://twitter.com/srbiv">@srbiv</a> told me about it a few months ago.  Coderetreat is a day of development focused on learning. You do so through pair programming and TDD. The task is Conway&#8217;s Game of Life. We did 6 45-minute sessions, each one with a different restriction on how we developed. After each session the code is thrown away and the entire group meets to discuss their experience from the last session.</p>

<p>The goal of the day is practice writing clean code. Usually in our daily work we are trying to meet deadlines or otherwise don&#8217;t have the time to do things as well as we would like. We accomplish the task that we set out to do but then never go back to improve it. We discussed this before starting and some basic clean coding principles, based on <a href="http://www.c2.com/cgi/wiki?XpSimplicityRules">Four Simple Design Rules</a>.</p>

<p>Based on that description I expected the attendees to be mostly developers with many years of experience. Instead I found a lot of developers who had only been at the craft for a couple of years or less! Everyone was really supportive and excited to get a chance to learn from others and grow as developers. Everyone had something to learn and something to teach; it was an amazing thing to be a part of.</p>

<p>I had the opportunity guide some newer developers in the ways of TDD while also learning different methods of design from others. I had many great discussions throughout the day, especially about JavaScript and Vim.</p>

<p>My favorite challenge was where my pair and I alternatingly wrote tests for eachother but could not speak about design. Trying to move the system forward with only test code to guide us really made me rethink what kinds of information, both intended and not, that tests are capable of containing.</p>

<p>I can&#8217;t wait until the next Coderetreat, I definitely plan to continue attending.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Falling in Love With Vim All Over Again]]></title>
    <link href="http://thomas.holmes.io/posts/falling-in-love-with-vim/"/>
    <updated>2013-06-14T23:50:00-04:00</updated>
    <id>http://thomas.holmes.io/posts/falling-in-love-with-vim</id>
    <content type="html"><![CDATA[<p>About about 2 years ago, I stopped using vim. I was sad, but didn&#8217;t think too much of it. I had just moved on from a job where I used vim full time. Unfortunately, it was in a language known as PowerBASIC. This language has very low adoption and there was no community tooling available. I had to handroll my own syntax and indentation files (I was able to steal from the BASIC files). I had no tags support and never felt like I really got to hit my stride despite using vim daily for over 3 years.</p>

<p>Starting in late 2011 I&#8217;ve been working primarily in Visual Studio. For the most part it is a great IDE with a lot of powerful features. Combined with the refactoring and productivity shortcuts available in <a href="http://devexpress.com">CodeRush</a> things still felt pretty nice. I tried using some vim keybinding addons but they were never as responsive as is necessary to work the vim way. In addition to no longer using vim at work my amount of personal development work had sharply declined. What little I did was done with Visual Studio. I started to forget how nice working in vim really was. Maybe it wasn&#8217;t really necessary, I thought. Especially not with tooling this powerful.</p>

<p>Then something changed. I decided to make a committed effort to learning web development. Instead of taking the obvious route of using ASP.NET I decided to go a completely different direction and use Ruby on Rails. I&#8217;m writing tons of code on in my free time and doing it all in vim. I&#8217;ve never been happer! The flexibility of Ruby is beautiful and expressive. And Rails, while sometimes confusing and magical, makes a lot of sense and helps you get things done. I&#8217;m working a ton in vim and loving it.</p>

<p>After being &#8220;lost&#8221; for so long vim has reminded me what a powerful <em>really</em> development environment is.</p>

<h3>Power is the inverse of friction between creativity and expression</h3>

<p> Big meaty IDEs lured me into thinking lots of features, integrated menus, and GUI tools were power. This is not to say that vim lacks features or power. It wants for neither.</p>

<p>Nothing else I have used has come close to vim. It has power that I have never had to pay for with my effectiveness or ability to express myself. Every time the big feature-rich IDE churns for a quarter second as it parses background files or does <em>whatever the heck it thinks is more important than me typing</em> I am jarred. Effectiveness drops. This aggregates over the day I find myself frustrated, distracted, and ineffective. Vim doesn&#8217;t do this to me.</p>

<p>Vim. <em>I&#8217;ve missed you.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby, Rails, And Friends]]></title>
    <link href="http://thomas.holmes.io/posts/ruby-rails-and-friends/"/>
    <updated>2013-05-15T00:00:00-04:00</updated>
    <id>http://thomas.holmes.io/posts/ruby-rails-and-friends</id>
    <content type="html"><![CDATA[<p>For the last 6 months I’ve been slowly teaching myself Ruby on Rails. It’s been a lot of fun and I’ve loved most every minute of it. My last run at web development was several years ago before technologies like Heroku were common. I spent some time trying to learn Django but did not find the ecosystem quite as mature as I would have liked. I found myself stuck playing sysadmin on a webserver, which is a role I am neither interested in or great at. So I hung up web development, experimented with mobile went back to desktop application development.</p>

<p>Four years later, enter Ruby on Rails. I’m having a blast. The tools are great. The community is wonderful. And after spending every day for two years with my nose buried in Visual Studio I am thrilled to be back to vim. It is <em>bliss</em>.</p>

<p>I’m active on GitHub and attend several regular meetings and extra events with the Ruby community. I’ve made tons of new friends and enjoying all of it. I’ve hardly played a video game in months and I can hardly believe it. I’ve got motivation to work a full day and then another three or four every night. It’s all fun.</p>

<p>If you feel like you’re missing something in your life as a developer try to find a local group. It has made all of the difference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RPS Contest]]></title>
    <link href="http://thomas.holmes.io/posts/rps-contest/"/>
    <updated>2011-06-23T00:00:00-04:00</updated>
    <id>http://thomas.holmes.io/posts/rps-contest</id>
    <content type="html"><![CDATA[<p>The other week I came across a neat programming challenge called The RPS(Rock Paper Scissors) Programming Competition. The goal is to write a Python program that plays RPS against other programs. Each match is a best of 1,000.</p>

<p>This challenge caught my interest with its unique combination of ease and depth. While my best submission has dropped to a roughly 60% win rate there are some truely clever programs submitted. I am certain I can improve greatly and develop a submission over the coming weeks that is able to achieve a 70% win rate.</p>

<p>I would encourage anyone who enjoys programming or problem solving to give it a go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I love Android Development]]></title>
    <link href="http://thomas.holmes.io/posts/why-i-love-android-development/"/>
    <updated>2010-12-02T00:00:00-05:00</updated>
    <id>http://thomas.holmes.io/posts/why-i-love-android-development</id>
    <content type="html"><![CDATA[<p>Android development strikes a sweet spot for me, as a developer seeking to be a contributing member in the software community.</p>

<p>I have taken a few shots at web development and it just doesn’t feel right. While it is such a visual and rewarding experience. I just can’t shake the feeling of it being the most phenomenal kludge.</p>

<p>It is easy to distribute and consume in an almost completely platform independent environment. I love being able to send a someone a link and say, “Hey, check this out!” and have them be greeted by a slick web app.</p>

<p>But despite all of this it still feels wrong.</p>

<p>Android offers you a much more consistent development platform while simultaneously keeping  much of the ease of distribution alive.</p>

<p>I like how Android development feels like a merger between web accessibility and desktop consistency.</p>

<p>I do realize that Android has its own host of complexities such as the numerous possible devices, API versions, and the challenges of the application lifecycle.</p>

<p>It won’t say that it is perfect, but I am comfortable saying that it feels very right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Soft Keyboard For Dialogs]]></title>
    <link href="http://thomas.holmes.io/posts/android-soft-keyboard-ime-for-dialogs/"/>
    <updated>2010-11-27T00:00:00-05:00</updated>
    <id>http://thomas.holmes.io/posts/android-soft-keyboard-ime-for-dialogs</id>
    <content type="html"><![CDATA[<p>It seems like such a simple thing, you would like to show the Soft Keyboard automatically for a <code>Dialog</code>. You can easily find a number of ways to do this for an <code>Activity</code>. You can also find one often repeated, but inadequate, method being proliferated for a <code>Dialog</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputMethodManager</span> <span class="n">imm</span> <span class="o">=</span>
</span><span class='line'><span class="o">(</span><span class="n">InputMethodManager</span><span class="o">)</span> <span class="n">getSystemServer</span><span class="o">(</span><span class="n">INPUT_METHOD_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">imm</span><span class="o">.</span><span class="na">toggleSoftInput</span><span class="o">(</span><span class="n">imm</span><span class="o">.</span><span class="na">SHOW_FORCED</span><span class="o">,</span> <span class="n">imm</span><span class="o">.</span><span class="na">HIDE_NOT_ALWAYS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are, however, several problems with this method. It does not…</p>

<ul>
<li>respect the user’s phone and presence of a physical keyboard</li>
<li>close automatically when the dialog closes</li>
<li>close automatically if the user were to leave the activity or application completely</li>
</ul>


<p>There is however, a solution if you are targeting at least API Level 3 (Android 1.5). In your <code>onPrepareDialog()</code>, or wherever you are displaying your dialog do the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dialog</span><span class="o">.</span><span class="na">getWindow</span><span class="o">()</span>
</span><span class='line'>   <span class="o">.</span><span class="na">setSoftInputMode</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">SOFT_INPUT_STATE_VISIBLE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will have the same result on a <code>Dialog</code> as setting <code>android:windowSoftInputMode="stateVisible"</code> for an activity in your <code>AndroidManifest.xml</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Android RadioButton]]></title>
    <link href="http://thomas.holmes.io/posts/custom-android-radiobutton/"/>
    <updated>2010-11-24T00:00:00-05:00</updated>
    <id>http://thomas.holmes.io/posts/custom-android-radiobutton</id>
    <content type="html"><![CDATA[<p>I was browsing StackOverflow and came across a question about making custom <code>RadioButtons</code> and figured I could answer so I decided to take the plunge.</p>

<p>To implement a custom styled RadioButton you can follow the below steps or look at the complete example source <a href="http://code.devminded.com/custom-radiobutton/src">here</a>.</p>

<p>Create the drawable resources for your custom RadioButton. You should have at least 4 icons:</p>

<table>
<thead>
<tr>
<th></th>
<th>Pressed </th>
<th>Checked</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>True    </td>
<td>True   </td>
</tr>
<tr>
<td></td>
<td>True    </td>
<td>False  </td>
</tr>
<tr>
<td></td>
<td>False   </td>
<td>True   </td>
</tr>
<tr>
<td></td>
<td>False   </td>
<td>False  </td>
</tr>
</tbody>
</table>


<p>Place your images in <code>res/drawable</code> or if if you have a version for each screen density place them in their corresponding <code>res/drawable-ldpi</code>, <code>res/drawable-mdpi</code>, and <code>res/drawable-hdpi</code> folders.</p>

<p>Then create a <code>selector</code> type XML file in res/drawable. Here is my <code>res/drawable/button_radio.xml</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;selector</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>      <span class="na">android:drawable=</span><span class="s">&quot;@drawable/radio_on&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>      <span class="na">android:drawable=</span><span class="s">&quot;@drawable/radio_off&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;true&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>      <span class="na">android:drawable=</span><span class="s">&quot;@drawable/radio_on_pressed&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item</span> <span class="na">android:state_checked=</span><span class="s">&quot;false&quot;</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>      <span class="na">android:drawable=</span><span class="s">&quot;@drawable/radio_off_pressed&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/selector&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setup your RadioGroup like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RadioGroup</span> <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>   <span class="na">android:layout_height=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>   <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span>
</span><span class='line'>   <span class="na">android:checkedButton=</span><span class="s">&quot;@+id/first&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;RadioButton</span> <span class="na">android:id=</span><span class="s">&quot;@+id/first&quot;</span>
</span><span class='line'>      <span class="na">android:width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:height=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:button=</span><span class="s">&quot;@drawable/button_radio&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;RadioButton</span> <span class="na">android:id=</span><span class="s">&quot;@+id/second&quot;</span>
</span><span class='line'>      <span class="na">android:width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:height=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:button=</span><span class="s">&quot;@drawable/button_radio&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;RadioButton</span> <span class="na">android:id=</span><span class="s">&quot;@+id/third&quot;</span>
</span><span class='line'>      <span class="na">android:width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:height=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:button=</span><span class="s">&quot;@drawable/button_radio&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;RadioButton</span> <span class="na">android:id=</span><span class="s">&quot;@+id/fourth&quot;</span>
</span><span class='line'>      <span class="na">android:width=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:height=</span><span class="s">&quot;50dp&quot;</span>
</span><span class='line'>      <span class="na">android:button=</span><span class="s">&quot;@drawable/button_radio&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/RadioGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have specified dimension of 50dp as the dimension of my drawables are 50px x 50px. Also notice I am setting <code>android:button</code> and not <code>android:background</code>.</p>

<p><img src="http://thomas.holmes.io/images/customradio.png" title="'Custom RadioButton'" ></p>

<p>Hopefully this can serve as a nice starting point for anyone looking to create some new and interesting effects with simple <code>RadioButtons</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android TextView With Custom Link Text]]></title>
    <link href="http://thomas.holmes.io/posts/android-textview-with-custom-link-text/"/>
    <updated>2010-11-21T00:00:00-05:00</updated>
    <id>http://thomas.holmes.io/posts/android-textview-with-custom-link-text</id>
    <content type="html"><![CDATA[<p>This is just going to be a quick how-to on creating a TextView with custom URL text.</p>

<p>To do this, you need to create a Spannable text object by using Html.fromHtml and then setting the MovementMethod of the TextView to a LinkMovementMethod. Here is an example using a dialog.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dialog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dialog</span><span class="o">(</span><span class="k">this</span><span class="o">);</span><span class="n">dialog</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">about</span><span class="o">);</span>
</span><span class='line'><span class="n">dialog</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">about_score_it</span><span class="o">);</span>
</span><span class='line'><span class="n">TextView</span> <span class="n">website</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">about_website</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">realURL</span> <span class="o">=</span> <span class="s">&quot;http://blog.devminded.com/projects/score-it&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">visibleURL</span> <span class="o">=</span> <span class="s">&quot;http://blog.devminded.com&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//The following builds the spannable item and will cause the text to display as a link</span>
</span><span class='line'><span class="n">website</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Html</span><span class="o">.</span><span class="na">fromHtml</span><span class="o">(</span><span class="s">&quot;&lt;a href=\&quot; + realURL + &quot;</span><span class="err">\</span><span class="s">&quot;&gt;&quot;</span> <span class="o">+</span> <span class="n">visibleURL</span> <span class="o">+</span> <span class="s">&quot;&lt;/a&gt;&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//The following makes it clickable</span>
</span><span class='line'><span class="n">website</span><span class="o">.</span><span class="na">setMovementMethod</span><span class="o">(</span><span class="n">LinkMovementMethod</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or with resources:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dialog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dialog</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">dialog</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">about</span><span class="o">);</span>
</span><span class='line'><span class="n">dialog</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">about_score_it</span><span class="o">);</span>
</span><span class='line'><span class="n">TextView</span> <span class="n">website</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">about_website</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">website</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Html</span><span class="o">.</span><span class="na">fromHtml</span><span class="o">(</span><span class="s">&quot;&lt;a href=\&quot;&quot;</span> <span class="o">+</span> <span class="n">mRes</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">about_score_it_website_url</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\&quot;&gt;&quot;</span> <span class="o">+</span> <span class="n">mRes</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">about_score_it_website_text</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&lt;/a&gt;&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">website</span><span class="o">.</span><span class="na">setMovementMethod</span><span class="o">(</span><span class="n">LinkMovementMethod</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see the full context of this example please check out <a href="http://code.devminded.com/score-it/src/78a59d314ce2/src/com/devminded/scoreit/ScoreIt.java">ScoreIt.java</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SQLite Database Management]]></title>
    <link href="http://thomas.holmes.io/posts/android-sqlite-database-management/"/>
    <updated>2010-11-16T00:00:00-05:00</updated>
    <id>http://thomas.holmes.io/posts/android-sqlite-database-management</id>
    <content type="html"><![CDATA[<p>Just as I was trying to wrap up Score It! I noticed my Logcat window was getting flooded with error messages. Somehow during all my debugging and development I didn’t notice the pages of errors being thrown by SQLite.</p>

<p><code>java.lang.IllegalStateException ... SQLiteDatabase created and never closed</code></p>

<p>Now these errors didn’t appear to have any adverse affects on my application but I certainly did not want to release an app that I knew was spewing errors. I wrestled with this for an evening searching and trying everything I could think of.</p>

<p>Some people suggested opening and closing the database around all accesses. Others suggested littering all of the lifecycle overrides with open and close statements. I found the former unreasonable and the latter inadequate. I needed to keep my database connections open as much as possible because I was working with ListView and ListActivity objects.</p>

<p>I managed to reduce the frequency of the errors but it was still happening consistently if I followed specific steps but I decided to throw in the towel for the time being.</p>

<p>The next day I decided to revisit the issue and make sure I had a better understanding of the problem. I stepped through my app, using a ridiculous number of breakpoints. It soon became clear that it was not a specific line of code that was causing the problem. This error was being generated by the database object when the garbage collector was hitting it.</p>

<p>I experimented a bit further and came up with a solution that seemed to eliminate all of my SQLite database errors.</p>

<p>In the Activities that maintained a database connection I put a close() statement in the Activity.OnDestroy() override:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mDbHelper</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my database helper class, modeled after Notepad, I changed the open function from:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="n">ScoreDbAdapter</span> <span class="nf">open</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mDbHelper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="n">mCtx</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mDb</span> <span class="o">=</span> <span class="n">mDbHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="n">ScoreDbAdapter</span> <span class="nf">open</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mDbHelper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mDbHelper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="n">mCtx</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">mDb</span> <span class="o">=</span> <span class="n">mDbHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This cleared up all the errors.</p>
]]></content>
  </entry>
  
</feed>
